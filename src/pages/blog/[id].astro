---
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { collections } from '../../data/collections';

export async function getStaticPaths() {
    const blogEntries = await getCollection('blog');
    return blogEntries.map((entry: { slug: any; }) => ({
        params: { id: entry.slug },
        props: { entry },
    }));
}

interface Props {
    entry: CollectionEntry<'blog'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Find the corresponding experience
const experienceId = entry.data.experienceId;
const collection = collections.find(c => experienceId.startsWith(c.id));
const experience = collection?.experiences.find(e => `${collection.id}-${e.id}` === experienceId);
---

<style is:global>
    /* Custom styles for markdown content */
    .prose {
        color: rgb(167 243 208 / 0.8); /* emerald-200 with opacity */
        line-height: 1.75;
    }
    
    .prose h1,
    .prose h2,
    .prose h3,
    .prose h4 {
        color: rgb(236 253 245); /* emerald-50 */
        font-weight: 700;
        line-height: 1.3;
    }

    .prose h1 {
        font-size: 2.5em;
        margin-top: 0;
        margin-bottom: 1em;
    }

    .prose h2 {
        font-size: 1.875em;
        margin-top: 2em;
        margin-bottom: 1em;
    }

    .prose h3 {
        font-size: 1.5em;
        margin-top: 1.6em;
        margin-bottom: 0.8em;
    }

    .prose p {
        margin-top: 1.25em;
        margin-bottom: 1.25em;
        line-height: 1.8;
    }

    .prose p + p {
        margin-top: 1.5em;
    }

    .prose a {
        color: rgb(52 211 153); /* emerald-400 */
        text-decoration: underline;
        text-decoration-thickness: 2px;
        text-underline-offset: 2px;
    }

    .prose a:hover {
        color: rgb(16 185 129); /* emerald-500 */
    }

    .prose strong {
        color: rgb(236 253 245); /* emerald-50 */
        font-weight: 600;
    }

    .prose ul,
    .prose ol {
        margin-top: 1.25em;
        margin-bottom: 1.25em;
        padding-left: 1.625em;
    }

    .prose li {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }

    .prose blockquote {
        border-left: 4px solid rgb(52 211 153); /* emerald-400 */
        padding-left: 1em;
        margin: 1.5em 0;
        font-style: italic;
        color: rgb(167 243 208 / 0.9); /* slightly brighter than normal text */
    }

    .prose img {
        margin: 2em auto;
        border-radius: 0.5rem;
        max-width: 100%;
        height: auto;
    }

    .prose code {
        background-color: rgb(6 78 59 / 0.5); /* emerald-900 with opacity */
        padding: 0.2em 0.4em;
        border-radius: 0.25em;
        font-size: 0.875em;
    }

    .prose pre {
        background-color: rgb(6 78 59 / 0.5); /* emerald-900 with opacity */
        padding: 1.25em;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1.5em 0;
    }

    .prose pre code {
        background-color: transparent;
        padding: 0;
        border-radius: 0;
    }

    /* Fix spacing between elements */
    .prose > :first-child {
        margin-top: 0;
    }

    .prose > :last-child {
        margin-bottom: 0;
    }
</style>

<MainLayout title={entry.data.title}>
    <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-emerald-50 mb-4">{entry.data.title}</h1>
            {entry.data.date && (
                <time class="text-emerald-400/60 text-sm">
                    {new Date(entry.data.date).toLocaleDateString()}
                </time>
            )}
            {entry.data.description && (
                <p class="text-emerald-300/70 mt-4 text-lg">
                    {entry.data.description}
                </p>
            )}
        </header>
        
        {experience?.imageUrl && (
            <div class="relative mb-12 rounded-2xl overflow-hidden shadow-xl w-64 sm:w-80 md:w-96">
                <div class="loading-gradient w-full" style="padding-top: 125%;"></div>
                <img 
                    src={experience.imageUrl} 
                    alt={experience.title}
                    class="absolute inset-0 w-full h-full object-cover object-[center_25%]"
                    onload="this.style.opacity = 1"
                    style="opacity: 0; transition: opacity 0.3s ease-in-out;"
                />
            </div>
        )}
        
        <div class="prose max-w-none">
            <Content />
        </div>
    </article>
</MainLayout>

<style>
    @keyframes gradient {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }

    .loading-gradient {
        background: linear-gradient(90deg, #000000, #1B4D3E, #000000);
        background-size: 200% 200%;
        animation: gradient 2s ease infinite;
    }
</style> 